// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Uptime.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210713141758_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CompanyReservation", b =>
                {
                    b.Property<string>("CompaniesId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ReservationsId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CompaniesId", "ReservationsId");

                    b.HasIndex("ReservationsId");

                    b.ToTable("ReservationCompanies");
                });

            modelBuilder.Entity("Domain.Company", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("Domain.Destination", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReservationId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ReservationId");

                    b.ToTable("Destination");
                });

            modelBuilder.Entity("Domain.From", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("From");
                });

            modelBuilder.Entity("Domain.Leg", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PriceListId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PriceListId");

                    b.ToTable("Legs");
                });

            modelBuilder.Entity("Domain.PriceList", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ValidUntil")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("PriceLists");
                });

            modelBuilder.Entity("Domain.Provider", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("FlightEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FlightStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("LegId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("LegId");

                    b.ToTable("Providers");
                });

            modelBuilder.Entity("Domain.Reservation", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("TotalPrice")
                        .HasColumnType("real");

                    b.Property<long>("TotalTravelTime")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("Domain.RouteInfo", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("Distance")
                        .HasColumnType("bigint");

                    b.Property<string>("FromId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ToId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("FromId");

                    b.HasIndex("ToId");

                    b.ToTable("RouteInfos");
                });

            modelBuilder.Entity("Domain.To", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("To");
                });

            modelBuilder.Entity("CompanyReservation", b =>
                {
                    b.HasOne("Domain.Company", null)
                        .WithMany()
                        .HasForeignKey("CompaniesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Reservation", null)
                        .WithMany()
                        .HasForeignKey("ReservationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Destination", b =>
                {
                    b.HasOne("Domain.Reservation", null)
                        .WithMany("TravelRoute")
                        .HasForeignKey("ReservationId");
                });

            modelBuilder.Entity("Domain.Leg", b =>
                {
                    b.HasOne("Domain.PriceList", "PriceList")
                        .WithMany("Legs")
                        .HasForeignKey("PriceListId");

                    b.Navigation("PriceList");
                });

            modelBuilder.Entity("Domain.Provider", b =>
                {
                    b.HasOne("Domain.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("Domain.Leg", "Leg")
                        .WithMany("Providers")
                        .HasForeignKey("LegId");

                    b.Navigation("Company");

                    b.Navigation("Leg");
                });

            modelBuilder.Entity("Domain.RouteInfo", b =>
                {
                    b.HasOne("Domain.From", "From")
                        .WithMany()
                        .HasForeignKey("FromId");

                    b.HasOne("Domain.Leg", "Leg")
                        .WithOne("RouteInfo")
                        .HasForeignKey("Domain.RouteInfo", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.To", "To")
                        .WithMany()
                        .HasForeignKey("ToId");

                    b.Navigation("From");

                    b.Navigation("Leg");

                    b.Navigation("To");
                });

            modelBuilder.Entity("Domain.Leg", b =>
                {
                    b.Navigation("Providers");

                    b.Navigation("RouteInfo");
                });

            modelBuilder.Entity("Domain.PriceList", b =>
                {
                    b.Navigation("Legs");
                });

            modelBuilder.Entity("Domain.Reservation", b =>
                {
                    b.Navigation("TravelRoute");
                });
#pragma warning restore 612, 618
        }
    }
}
